@import[prelude].
@import[math].

let Node = @struct[head, tail].

let printlist = lambda (list)
                    if list == nothing
                    then println("nil")
                    else {
                        print(list'head).
                        print(" ").
                        this(list'tail).
                    }.

let length = lambda (list)
                if list == nothing
                then 0
                else 1 + this(list'tail).

let largest_in_list = lambda (list) {
    if length(list) == 0
    then {
        return nothing.
    }.
    
    let helper = lambda (largest, list)
                    if list == nothing
                    then largest
                    else this(max(largest, list'head), list'tail).
                    
    helper(0, list)
}.

let filter = lambda (predicate, list)
                if list == nothing
                then nothing
                else if predicate(list'head)
                     then Node(list'head, this(predicate, list'tail))
                     else this(predicate, list'tail).

let runtests = lambda (name, list) {
    println(name).

    printlist(list).

    print("Length: ").
    println(length(list)).

    print("Largest: ").
    println(largest_in_list(list)).

    print("Odds only: ").
    printlist(filter(lambda (x) mod(x, 2) != 0, list)).

    println("").
}.

runtests("Ascending",
    Node(1, Node(2, Node(3, Node(4, Node(5, nothing)))))).
runtests("Descending",
    Node(5, Node(4, Node(3, Node(2, Node(1, nothing)))))).
runtests("Arbitrary",
    Node(10, Node(23, Node(5, Node(56, Node(17, nothing)))))).
runtests("Empty",
    nothing).
